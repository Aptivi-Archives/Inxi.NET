
'    Inxi.NET  Copyright (C) 2020-2021  EoflaOE
'
'    This file is part of Inxi.NET
'
'    Inxi.NET is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 3 of the License, or
'    (at your option) any later version.
'
'    Inxi.NET is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.
'
'    You should have received a copy of the GNU General Public License
'    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Imports System.IO
Imports Extensification.StringExts
Imports System.Reflection.Assembly

Public Class Inxi

    Public ReadOnly Hardware As HardwareInfo

    ''' <summary>
    ''' Intializes the new instance of Inxi class and parses hardware
    ''' </summary>
    Public Sub New()
        Me.New("/usr/bin/inxi", "/usr/bin/cpanel_json_xs")
    End Sub

    ''' <summary>
    ''' Initializes the new instance of Inxi class with specified path and parses hardware
    ''' </summary>
    ''' <param name="InxiPath">Path to Inxi executable. It's usually /usr/bin/inxi. Ignored in Windows.</param>
    ''' <param name="CpanelJsonXsPath">Path to CPanelJsonXS executable. It's usually /usr/bin/cpanel_json_xs. Ignored in Windows.</param>
    Public Sub New(InxiPath As String, CpanelJsonXsPath As String)
        If IsUnix() Then
            Debug("Inxi.NET {0} running on Unix.", GetExecutingAssembly().GetName().Version.ToString())
            If IsMacOS() Then
                Debug("Type: macOS")
                Hardware = New HardwareInfo(InxiPath)
            Else
                Debug("Type: Unix")
                Debug("Looking for {0} and {1}...", InxiPath, CpanelJsonXsPath)
                If File.Exists(InxiPath) And File.Exists(CpanelJsonXsPath) Then
                    Debug("They're installed.")
                    Hardware = New HardwareInfo(InxiPath)
                Else
                    Debug("They're not installed.")
                    Throw New InvalidOperationException("You must have Inxi and libcpanel-json-xs-perl installed. (Could not find """ + InxiPath + """ and """ + CpanelJsonXsPath + """.)")
                End If
            End If
        Else
            Debug("Inxi.NET {0} running on Windows.", GetExecutingAssembly().GetName().Version.ToString())
            Hardware = New HardwareInfo(InxiPath)
        End If
    End Sub

End Class

Public Module InxiTrace

    ''' <summary>
    ''' Indicates whether the debug data is received or not. It can be used to write debug data to debugger.
    ''' </summary>
    ''' <param name="Message">A message</param>
    Public Event DebugDataReceived(ByVal Message As String, ByVal PlainMessage As String)

    ''' <summary>
    ''' Write a debug message
    ''' </summary>
    ''' <param name="Message">A message</param>
    Friend Sub Debug(ByVal Message As String)
        'Get trace information
        Dim STrace As New StackTrace(True)
        Dim Source As String = Path.GetFileName(STrace.GetFrame(1).GetFileName)
        Dim LineNum As String = STrace.GetFrame(1).GetFileLineNumber
        Dim Func As String = STrace.GetFrame(1).GetMethod.Name

        'Apparently, GetFileName on Mono in Linux doesn't work for MDB files made using pdb2mdb for PDB files that are generated by Visual Studio, so we take the last entry for the backslash to get the source file name.
        If IsUnix() Then
            If Not String.IsNullOrEmpty(Source) Then
                Source = Source.Split("\")(Source.Split("\").Length - 1)
            End If
        End If

        If Source IsNot Nothing And Not LineNum = 0 Then
            RaiseEvent DebugDataReceived($"({Func} - {Source}:{LineNum}) {Message}", Message)
        Else
            RaiseEvent DebugDataReceived(Message, Message)
        End If
    End Sub

    ''' <summary>
    ''' Write a debug message
    ''' </summary>
    ''' <param name="Message">A message</param>
    Friend Sub Debug(ByVal Message As String, ParamArray Values() As Object)
        'Get trace information
        Dim STrace As New StackTrace(True)
        Dim Source As String = Path.GetFileName(STrace.GetFrame(1).GetFileName)
        Dim LineNum As String = STrace.GetFrame(1).GetFileLineNumber
        Dim Func As String = STrace.GetFrame(1).GetMethod.Name

        'Apparently, GetFileName on Mono in Linux doesn't work for MDB files made using pdb2mdb for PDB files that are generated by Visual Studio, so we take the last entry for the backslash to get the source file name.
        If IsUnix() Then
            If Not String.IsNullOrEmpty(Source) Then
                Source = Source.Split("\")(Source.Split("\").Length - 1)
            End If
        End If

        If Source IsNot Nothing And Not LineNum = 0 Then
            RaiseEvent DebugDataReceived($"({Func} - {Source}:{LineNum}) {Message.FormatString(Values)}", Message.FormatString(Values))
        Else
            RaiseEvent DebugDataReceived(Message.FormatString(Values), Message.FormatString(Values))
        End If
    End Sub

End Module

Module InxiInternalUtils

    ''' <summary>
    ''' Is the platform Unix?
    ''' </summary>
    Friend Function IsUnix()
        Return Environment.OSVersion.Platform = PlatformID.Unix
    End Function

    ''' <summary>
    ''' Is the Unix platform macOS?
    ''' </summary>
    Friend Function IsMacOS()
        If IsUnix() Then
            Dim UnameS As New Process
            Dim UnameSInfo As New ProcessStartInfo With {.FileName = "/usr/bin/uname", .Arguments = "-s",
                                                         .CreateNoWindow = True,
                                                         .UseShellExecute = False,
                                                         .WindowStyle = ProcessWindowStyle.Hidden,
                                                         .RedirectStandardOutput = True}
            UnameS.StartInfo = UnameSInfo
            UnameS.Start()
            UnameS.WaitForExit()
            Dim System As String = UnameS.StandardOutput.ReadToEnd
            Debug("Searching {0} for ""Darwin""...", System.Replace(Environment.NewLine, ""))
            Return System.Contains("Darwin")
        Else
            Return False
        End If
    End Function

End Module